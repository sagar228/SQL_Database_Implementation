--SCHOLARSHIP TABLE
CREATE TABLE SCHOLARSHIP 
(
  SCHOLARSHIPID VARCHAR2(20) NOT NULL 
, DESCRIPTION VARCHAR (300) 
, CONSTRAINT SCHOLARSHIP_PK PRIMARY KEY 
  (
    SCHOLARSHIPID 
  )
  ENABLE 
);

CREATE SEQUENCE SCHOLARSHIP_SEQ
 START WITH  10041
 MAXVALUE 99999
 INCREMENT BY   1
;

drop sequence SCHOLARSHIP_SEQ;

CREATE or REPLACE TRIGGER SCHOLARSHIP_TRG 
BEFORE INSERT ON SCHOLARSHIP 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING THEN
      SELECT 'SC' || SCHOLARSHIP_SEQ.NEXTVAL 
      INTO :NEW.SCHOLARSHIPID 
      FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
drop trigger SCHOLARSHIP_TRG;
--testing
insert into scholarship  VALUES ('10001', 'Test');
select * from scholarship;

--CASH_SCHOLARSHIP
CREATE TABLE CASH_SCHOLARSHIP 
(
  SCHOLARSHIPID VARCHAR2(20) NOT NULL 
, CASHAMOUNT NUMBER(9,2) 
);

ALTER TABLE CASH_SCHOLARSHIP
ADD CONSTRAINT CASH_SCHOLARSHIP_FK1 FOREIGN KEY
(
  SCHOLARSHIPID 
)
REFERENCES SCHOLARSHIP
(
  SCHOLARSHIPID 
)
ENABLE;

ALTER TABLE CASH_SCHOLARSHIP
ADD CONSTRAINT CASH_SCHOLARSHIP_CHK1 CHECK 
(CashAmount > 0)
ENABLE;

--testing
insert into cash_scholarship VALUES ('S10001', 30.02);
select * from cash_scholarship;

--Graduate Assistantship
CREATE TABLE GRADUATE_ASSISTANTSHIP 
(
  SCHOLARSHIPID VARCHAR2(20) NOT NULL 
, DEPARTMENTNAME VARCHAR2(100) 
, PROFESSORNAME VARCHAR2(100) 
);

ALTER TABLE GRADUATE_ASSISTANTSHIP
ADD CONSTRAINT GRADUATE_ASSISTANTSHIP_FK1 FOREIGN KEY
(
  SCHOLARSHIPID 
)
REFERENCES SCHOLARSHIP
(
  SCHOLARSHIPID 
)
ENABLE;

--PILLAR

CREATE TABLE PILLAR 
(
  PILLARID VARCHAR2(20) NOT NULL 
, PILLARTYPE VARCHAR2(20) 
, DESCRIPTION VARCHAR2(300) 
, CONSTRAINT PILLAR_PK PRIMARY KEY 
  (
    PILLARID 
  )
  ENABLE 
);

ALTER TABLE PILLAR
ADD CONSTRAINT PILLAR_CHK1 CHECK 
(PillarType IN ('Academic', 'Social', 'Ethical'))
ENABLE;

CREATE SEQUENCE PILLAR_SEQ
 START WITH  10001
 MAXVALUE 99999
 INCREMENT BY   1
 ;

CREATE TRIGGER PILLAR_TRG 
BEFORE INSERT ON PILLAR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING THEN
      SELECT 'P' || PILLAR_SEQ.NEXTVAL INTO :NEW.PILLARID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

--testing

insert into pillar VALUES ('1', 'Academic', 'Test');
select * from pillar;

-- SIGNUP_TYPES
CREATE TABLE SIGNUP_TYPES 
(
  SIGNUPTYPEID VARCHAR2(20) NOT NULL 
, DESCRIPTION VARCHAR2(300) 
, CONSTRAINT SIGNUP_TYPES_PK PRIMARY KEY 
  (
    SIGNUPTYPEID 
  )
  ENABLE 
);

CREATE SEQUENCE SIGNUP_TYPES_SEQ
 START WITH  10001
 MAXVALUE 99999
 INCREMENT BY   1
 ;

CREATE TRIGGER SIGNUP_TYPES_TRG 
BEFORE INSERT ON SIGNUP_TYPES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING THEN
      SELECT 'ST' || SIGNUP_TYPES_SEQ.NEXTVAL INTO :NEW.DESCRIPTION FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

--SIGNUP_TYPE_FACULTY
CREATE TABLE SIGNUP_TYPES_FACULTY 
(
  SIGNUPTYPEID VARCHAR2(20) NOT NULL 
, FACULTYINVOLVED VARCHAR2(100) NOT NULL 
, CONSTRAINT SIGNUP_TYPES_FACULTY_PK PRIMARY KEY 
  (
    FACULTYINVOLVED 
  , SIGNUPTYPEID 
  )
  ENABLE 
);

ALTER TABLE SIGNUP_TYPES_FACULTY
ADD CONSTRAINT SIGNUP_TYPES_FACULTY_FK1 FOREIGN KEY
(
  SIGNUPTYPEID 
)
REFERENCES SIGNUP_TYPES
(
  SIGNUPTYPEID 
)
ENABLE;

--FACULTY
CREATE TABLE FACULTY 
(
  EMPLOYEEID VARCHAR2(20) NOT NULL 
, FIRSTNAME VARCHAR2(100) 
, MIDDLENAME VARCHAR2(100) 
, LASTNAME VARCHAR2(100) 
, UANETID VARCHAR(20) 
, EMAILID VARCHAR2(50) 
, DEPARTMENT VARCHAR2(50) 
, JOBTITLE VARCHAR2(100) 
, CONSTRAINT FACULTY_PK PRIMARY KEY 
  (
    EMPLOYEEID 
  )
  ENABLE 
);

CREATE SEQUENCE FACULTY_SEQ
 START WITH  10001
 MAXVALUE 99999
 INCREMENT BY   1
 ;

CREATE TRIGGER FACULTY_TRG 
BEFORE INSERT ON FACULTY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING THEN
      SELECT 'F' || FACULTY_SEQ.NEXTVAL INTO :NEW.EMPLOYEEID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

--FACULTY_PHONE
CREATE TABLE FACULTY_PHONE 
(
  EMPLOYEEID VARCHAR2(20) NOT NULL 
, PHONENUMBER VARCHAR2(100) NOT NULL 
, CONSTRAINT FACULTY_PHONE_PK PRIMARY KEY 
  (
    EMPLOYEEID 
  , PHONENUMBER 
  )
  ENABLE 
);

ALTER TABLE FACULTY_PHONE
ADD CONSTRAINT FACULTY_PHONE_FK1 FOREIGN KEY
(
  EMPLOYEEID 
)
REFERENCES FACULTY
(
  EMPLOYEEID 
)
ENABLE;

--CAN_AUTHORIZE
CREATE TABLE CAN_AUTHORIZE 
(
  SIGNUPTYPEID VARCHAR2(20) NOT NULL 
, EMPLOYEEID VARCHAR2(20) NOT NULL 
, CONSTRAINT CAN_AUTHORIZE_PK PRIMARY KEY 
  (
    SIGNUPTYPEID 
  , EMPLOYEEID 
  )
  ENABLE 
);

ALTER TABLE CAN_AUTHORIZE
ADD CONSTRAINT CAN_AUTHORIZE_FK1 FOREIGN KEY
(
  SIGNUPTYPEID 
)
REFERENCES SIGNUP_TYPES
(
  SIGNUPTYPEID 
)
ENABLE;

ALTER TABLE CAN_AUTHORIZE
ADD CONSTRAINT CAN_AUTHORIZE_FK2 FOREIGN KEY
(
  EMPLOYEEID 
)
REFERENCES FACULTY
(
  EMPLOYEEID 
)
ENABLE;

--ATTENDANCE_SIGNUP
CREATE TABLE ATTENDANCE_SIGNUP 
(
  SIGNUPID VARCHAR2(20) NOT NULL 
, DATEOFDECLARATION DATE 
, SIGNUPFORMAT VARCHAR2(100) 
, EMPLOYEEID VARCHAR2(20) 
, SIGNUPTYPEID VARCHAR2(20) 
, SID VARCHAR2(20) 
, PILLARID VARCHAR2(20) 
, DESCRIPTION VARCHAR2(300) 
, CONSTRAINT ATTENDANCE_SIGNUP_PK PRIMARY KEY 
  (
    SIGNUPID 
  )
  ENABLE 
);

ALTER TABLE ATTENDANCE_SIGNUP
ADD CONSTRAINT ATTENDANCE_SIGNUP_FK1 FOREIGN KEY
(
  EMPLOYEEID 
)
REFERENCES FACULTY
(
  EMPLOYEEID 
)
ENABLE;

ALTER TABLE ATTENDANCE_SIGNUP
ADD CONSTRAINT ATTENDANCE_SIGNUP_FK2 FOREIGN KEY
(
  SIGNUPTYPEID 
)
REFERENCES SIGNUP_TYPES
(
  SIGNUPTYPEID 
)
ENABLE;

ALTER TABLE ATTENDANCE_SIGNUP
ADD CONSTRAINT ATTENDANCE_SIGNUP_FK3 FOREIGN KEY
(
  SID 
)
REFERENCES STUDENT
(
  SID 
)
ENABLE;

ALTER TABLE ATTENDANCE_SIGNUP
ADD CONSTRAINT ATTENDANCE_SIGNUP_FK4 FOREIGN KEY
(
  PILLARID 
)
REFERENCES PILLAR
(
  PILLARID 
)
ENABLE;

ALTER TABLE ATTENDANCE_SIGNUP
ADD CONSTRAINT ATTENDANCE_SIGNUP_FK5 FOREIGN KEY
(
  EMPLOYEEID, SIGNUPTYPEID
)
REFERENCES CAN_AUTHORIZE
(
  EMPLOYEEID, SIGNUPTYPEID
)
ENABLE;

CREATE SEQUENCE ATTENDANCE_SIGNUP_SEQ
 START WITH  10001
 MAXVALUE 99999
 INCREMENT BY   1
 ;

CREATE or Replace TRIGGER ATTENDANCE_SIGNUP_TRG 
BEFORE INSERT ON ATTENDANCE_SIGNUP 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING THEN
      SELECT 'SI' || ATTENDANCE_SIGNUP_SEQ.NEXTVAL INTO :NEW.SIGNUPID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

--testing
select * from attendance_signup;


--all tables
SELECT * from attendance_signup;
SELECT * from can_authorize;

--NOMINATIONS
CREATE TABLE NOMINATIONS 
(
  SID VARCHAR2(20) NOT NULL 
, NOMINATEDBY VARCHAR2(20) NOT NULL 
, FIRSTNAME VARCHAR2(100) 
, LASTNAME VARCHAR2(100) 
, COMMENTS VARCHAR2(1000) 
, CONSTRAINT NOMINATIONS_PK PRIMARY KEY 
  (
    SID 
  , NOMINATEDBY 
  )
  ENABLE 
);

ALTER TABLE NOMINATIONS
ADD CONSTRAINT NOMINATIONS_FK1 FOREIGN KEY
(
  SID 
)
REFERENCES STUDENT
(
  SID 
)
ENABLE;

ALTER TABLE NOMINATIONS
ADD CONSTRAINT NOMINATIONS_FK2 FOREIGN KEY
(
  NOMINATEDBY 
)
REFERENCES STUDENT
(
  SID 
)
ENABLE;

---STUDENT_DETAILS

Create Table student_details
(
Sid Varchar2(20) Not Null,
Signup_Id Varchar2(20) Not Null,
Event_Id Varchar2(20),
Entry_Id Varchar2(20) Not Null,
Points_Obtained Number(2),
Remaining_Points Number(2) Check (Remaining_Points Between 0 And 45),
Semester_Term Varchar2(50),
Constraint Sd_student_details_Pk Primary Key (Sid,Signup_Id,Entry_Id),
Constraint Fk_student_details_Sid Foreign Key (Sid) References Student (Sid),
Constraint Fk_student_details_signup Foreign Key (Signup_Id) References ATTENDANCE_SIGNUP (SIGNUPID)

); 
